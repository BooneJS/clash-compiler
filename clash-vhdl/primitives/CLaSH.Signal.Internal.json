[ { "BlackBox" :
    { "name" : "CLaSH.Signal.Internal.register#"
    , "type" :
"register# :: SClock clk     -- ARG[0]
           -> a              -- ARG[1]
           -> Signal' clk a  -- ARG[2]
           -> Signal' clk a"
    , "templateD" :
"-- register begin
register_~COMPNAME_~SYM[0] : block
  signal ~SYM[1] : ~TYP[1];
  signal ~SYM[2] : ~TYP[2];
begin
  ~SYM[1] <= ~ARG[1];

  process(~CLK[0],~RST[0],~SYM[1])
  begin
    if ~RST[0] = '0' then
      ~SYM[2] <= ~SYM[1];
    elsif rising_edge(~CLK[0]) then
      ~SYM[2] <= ~ARG[2];
    end if;
  end process;

  ~RESULT <= ~SYM[2];
end block;
-- register end"
    }
  }
, { "BlackBox" :
    { "name" : "CLaSH.Signal.Internal.regEn#"
    , "type" :
"regEn# :: SClock clk       -- ARG[0]
        -> a                -- ARG[1]
        -> Signal' clk Bool -- ARG[2]
        -> Signal' clk a    -- ARG[3]
        -> Signal' clk a"
    , "templateD" :
"-- regEn begin
regEn_~COMPNAME_~SYM[0] : block
  signal ~SYM[1] : ~TYP[1];
  signal ~SYM[2] : ~TYP[2];
  signal ~SYM[3] : ~TYP[3];
begin
  ~SYM[1] <= ~ARG[1];
  ~SYM[2] <= ~ARG[2];

  process(~CLK[0],~RST[0],~SYM[1],~SYM[2])
  begin
    if ~RST[0] = '0' then
      ~SYM[3] <= ~SYM[1];
    elsif rising_edge(~CLK[0]) then
      if ~SYM[2] then
        ~SYM[3] <= ~ARG[3];
      end if;
    end if;
  end process;

  ~RESULT <= ~SYM[3];
end block;
-- regEn end"
    }
  }

, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.signal#"
    , "primType"  : "Function"
    }
  }
, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.mapSignal#"
    , "primType"  : "Function"
    }
  }
, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.appSignal#"
    , "primType"  : "Function"
    }
  }
, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.foldr#"
    , "primType"  : "Function"
    }
  }
, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.traverse#"
    , "primType"  : "Function"
    }
  }
, { "Primitive" :
    { "name"      : "CLaSH.Signal.Internal.joinSignal#"
    , "primType"  : "Function"
    }
  }
]
