[ { "BlackBox" :
    { "name" : "CLaSH.Prelude.BlockRam.File.blockRamFile'"
    , "type" :
"blockRamFile' :: (KnownNat m, KnownNat k)   -- (ARG[0],ARG[1])
               => SClock clk                 -- clk,  ARG[2]
               -> SNat n                     -- sz,   ARG[3]
               -> FilePath                   -- file, ARG[4]
               -> Signal' clk (Unsigned k)   -- wr,   ARG[5]
               -> Signal' clk (Unsigned k)   -- rd,   ARG[6]
               -> Signal' clk Bool           -- wren, ARG[7]
               -> Signal' clk (BitVector m)  -- din,  ARG[8]
               -> Signal' clk (BitVector m)"
    , "templateD" :
"blockRamFile_~COMPNAME_~SYM[0] : block
  type RamType is array(0 to ~LIT[3]-1) of bit_vector(~LIT[0]-1 downto 0);

  impure function InitRamFromFile (RamFileName : in string) return RamType is
    FILE RamFile : text open read_mode is RamFileName;
    variable RamFileLine : line;
    variable RAM : RamType;
  begin
    for i in RamType'range loop
      readline(RamFile,RamFileLine);
      read(RamFileLine,RAM(i));
    end loop;
    return RAM;
  end function;

  signal RAM : RamType := InitRamFromFile(~FILE[~LIT[4]]);
begin
  process(~CLK[2])
  begin
    if (rising_edge(~CLK[2])) then
      if ~ARG[7] then
        RAM(to_integer(~ARG[5])) <= to_bitvector(~ARG[8]);
      end if;

      ~RESULT <= to_stdlogicvector(RAM(to_integer(~ARG[6])));
    end if;
  end process;
end block;"
    }
  }
]
