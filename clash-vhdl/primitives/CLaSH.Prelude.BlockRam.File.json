[ { "BlackBox" :
    { "name" : "CLaSH.Prelude.BlockRam.File.blockRamFile#"
    , "type" :
"blockRamFile# :: KnownNat m                -- ARG[0]
               => SClock clk                -- clk,  ARG[1]
               -> SNat n                    -- sz,   ARG[2]
               -> FilePath                  -- file, ARG[3]
               -> Signal' clk Int           -- wr,   ARG[4]
               -> Signal' clk Int           -- rd,   ARG[5]
               -> Signal' clk Bool          -- wren, ARG[6]
               -> Signal' clk (BitVector m) -- din,  ARG[7]
               -> Signal' clk (BitVector m)"
    , "templateD" :
"blockRamFile_~COMPNAME_~SYM[0] : block
  type RamType is array(0 to ~LIT[2]-1) of bit_vector(~LIT[0]-1 downto 0);

  impure function InitRamFromFile (RamFileName : in string) return RamType is
    FILE RamFile : text open read_mode is RamFileName;
    variable RamFileLine : line;
    variable RAM : RamType;
  begin
    for i in RamType'range loop
      readline(RamFile,RamFileLine);
      read(RamFileLine,RAM(i));
    end loop;
    return RAM;
  end function;

  signal RAM  : RamType := InitRamFromFile(~FILE[~LIT[3]]);
  signal dout : ~TYP[7];
  signal wr   : integer range 0 to ~LIT[2]-1;
  signal rd   : integer range 0 to ~LIT[2]-1;
begin
  wr <= ~ARG[4]
  -- pragma translate_off
        mod ~LIT[2]
  -- pragma translate_on
        ;

  rd <= ~ARG[5]
  -- pragma translate_off
        mod ~LIT[2]
  -- pragma translate_on
        ;

  blockRamFile_~SYM[1] : process(~CLK[1])
  begin
    if (rising_edge(~CLK[1])) then
      if ~ARG[6] then
        RAM(to_integer(wr)) <= to_bitvector(~ARG[7]);
      end if;

      ~RESULT <= to_stdlogicvector(RAM(rd));
    end if;
  end process;
end block;"
    }
  }
]
